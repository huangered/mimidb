%code {
    #include <iostream>
    #include <stack>
    #include <vector>
    #include <cstring>
    
    #include "node.hpp"
    using namespace std;
}

%union { 
    Node node;
    std::vector<Node>* list;
    char* str;
}

@param Node

@token t_token
@token t_code
@token t_colon
@token t_identifier
@token t_block
@token t_union
@token t_type
@token t_type_type
@token t_sign
@token t_less
@token t_greater
@token t_param
%

@type <node> t_type t_type_type t_union t_code t_identifier t_colon t_block t_sign t_param
@type <node> Lex RuleList Rule ID Type Token Q Code Union Other Param
@type <list> TokenList TypeList RuleList IdList

%

Q : Lex { }

Lex : Code Union Param TokenList t_sign TypeList t_sign RuleList t_sign Other { $$ = makeLex($0, $1, $2, $3, $5, $7, $9 ); }

Param : t_param t_identifier { $$ = makeParam($1); }

Code : t_code t_block { $$ = makeCode($1); }

Union : t_union t_block { $$ = makeUnion($1); }

TokenList : TokenList Token { $0->push_back($1); $$ = $0; }
TokenList : Token { std::vector<Node>* vec = new std::vector<Node>(); vec->push_back($0); $$ = vec; }

Token : t_token t_identifier { $$ = makeToken($1); }

TypeList : TypeList Type { $0->push_back($1); $$ = $0; }
TypeList : Type { std::vector<Node>* vec = new std::vector<Node>(); vec->push_back($0); $$ = vec; }

Type : t_type t_less t_identifier t_greater IdList { $$ = makeType($2, $4); }

RuleList : RuleList Rule { $0->push_back($1); $$ = $0; }
RuleList : Rule { std::vector<Node>* vec = new std::vector<Node>(); vec->push_back($0); $$ = vec; }

Rule : ID t_colon IdList t_block { $$ = makeRule($0, $2, $3); }
Rule : ID t_colon IdList         { $$ = makeRule($0, $2, nullptr); }
Rule : ID t_colon                { $$ = makeRule($0, nullptr, nullptr); }
Rule : ID t_colon t_block        { $$ = makeRule($0, nullptr, $2); }

IdList : IdList ID { $0->push_back($1); $$ = $0; }
IdList : ID { std::vector<Node>* vec = new std::vector<Node>(); vec->push_back($0); $$ = vec; }

ID : t_identifier { }

Other : t_block { }

%

{

Node makeLex(Node codeNode, Node unionNode, Node paramNode, std::vector<Node>* tokens, std::vector<Node>* types,
                    std::vector<Node>* rules, Node other);

Node makeToken(Node token);

Node makeRule(Node n, std::vector<Node>* l, Node m);

Node makeType(Node typeNode, std::vector<Node>* nodes);

Node makeCode(Node block);

Node makeUnion(Node block);

Node makeParam(Node param);
}
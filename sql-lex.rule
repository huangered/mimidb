%code {
#include <vector>
#include "node.hpp"

int yylex();

}

%union { 
    Node node;
    std::vector<Node>* list;
    char* str;
}

@param Node

@token t_token
@token t_code
@token t_colon
@token t_identifier
@token t_block
@token t_union
@token t_type
@token t_type_type
@token t_sign
@token t_less
@token t_greater
@token t_param
@token t_maybe
@token t_semicolon
@token t_start_rule

%

@type <str> StartRule
@type <node> t_type t_type_type t_union t_code t_identifier t_colon t_block t_sign t_param t_start_rule
@type <node> Lex RuleList Rule ID Type Token Q Code Union Other Param RuleRight
@type <list> TokenList TypeList RuleList IdList RuleRightList

%

Q : Lex { } ;

Lex : Code Union Param TokenList t_sign TypeList t_sign RuleList StartRule t_sign Other { $$ = makeLex($0, $1, $2, $3, $5, $7, $8, $10 ); } ;

Param : t_param t_identifier { $$ = makeParam($1); } ;

Code : t_code t_block { $$ = makeCode($1); } ;

Union : t_union t_block { $$ = makeUnion($1); } ;

TokenList :
  TokenList Token { $0->push_back($1); $$ = $0; } 
| Token { std::vector<Node>* vec = new std::vector<Node>(); vec->push_back($0); $$ = vec; }
;

Token :
  t_token t_identifier { $$ = makeToken($1); }
| t_token t_less t_identifier t_greater t_identifier { $$ = makeToken($2, $4); }
;

TypeList :
  TypeList Type { $0->push_back($1); $$ = $0; } 
| Type { std::vector<Node>* vec = new std::vector<Node>(); vec->push_back($0); $$ = vec; }
;

Type : t_type t_less t_identifier t_greater IdList { $$ = makeType($2, $4); }  ;

RuleList :
  RuleList Rule { $0->push_back($1); $$ = $0; }
| Rule { std::vector<Node>* vec = new std::vector<Node>(); vec->push_back($0); $$ = vec; }
;

Rule : ID t_colon RuleRightList t_semicolon { $$ = makeRule($0, $2); } ;

RuleRightList :
  RuleRightList t_maybe RuleRight { $0->push_back($2); $$ = $0; }
| RuleRight  { std::vector<Node>* vec = new std::vector<Node>(); vec->push_back($0); $$ = vec; }
;

RuleRight : 
  IdList t_block { $$ = makeRuleRight($0, $1); } 
| IdList         { $$ = makeRuleRight($0, nullptr); } 
| t_block        { $$ = makeRuleRight(nullptr, $0); } 
|                { $$ = makeRuleRight(nullptr, nullptr); } 
;

IdList :
  IdList ID { $0->push_back($1); $$ = $0; }
| ID { std::vector<Node>* vec = new std::vector<Node>(); vec->push_back($0); $$ = vec; }
;

ID : t_identifier { } ;

Other : t_block { } ;

StartRule:
  t_start_rule t_identifier { $$ = makeStartRule($1); }
| ;

@start Q

%

{

Node makeLex(Node codeNode, Node unionNode, Node paramNode, std::vector<Node>* tokens, std::vector<Node>* types,
                    std::vector<Node>* rules, char* startRule, Node other);

Node makeToken(Node token);

Node makeToken(Node typeNode, Node token);

Node makeRule(Node n, std::vector<Node>* l);

Node makeRuleRight(std::vector<Node>* n, Node m);

Node makeType(Node typeNode, std::vector<Node>* nodes);

Node makeCode(Node block);

Node makeUnion(Node block);

Node makeParam(Node param);

char* makeStartRule(Node startRule);

}